'use strict';

var path = require('path');
var assert = require('assert');

var sinon = require('sinon');
var _ = require('lodash');

var config = require('../lib/config');

describe('Config', function() {
  this.timeout(5000);

  var sandbox;
  var fakeCb;

  before(function() {
    sandbox = sinon.sandbox.create();
  });

  beforeEach(function() {
    fakeCb = sandbox.stub();
  });

  afterEach(function() {
    sandbox.restore();
    config.initialize.clear(sinon.stub());
  });

  describe('initialize', function() {
    it('Returns an error if the required vars are not found.', function() {
      // Stub these so we don't actually delete them
      sandbox.stub(process.env, 'API_KEY_TTL');
      sandbox.stub(process.env, 'PORT');
      delete process.env.API_KEY_TTL;
      delete process.env.PORT;

      config.initialize(function(err) {
        assert.ok(err);
        var expected = 'Expected PORT,API_KEY_TTL to exist in the environment.';
        assert.strictEqual(err.message, expected);
      });
    });

    it('Initializes without error', function() {
      config.initialize(fakeCb);
      sinon.assert.calledWith(fakeCb, null);
    });

    it('Adds non-object properties to the config', function() {
      config.initialize(fakeCb);
      var expected = process.env.NODE_ENV;
      assert.strictEqual(config.nodeEnv, expected);
    });

    it('Adds object structure to the config', function() {
      config.initialize(fakeCb);
      assert.ok(config.opentok);

      var expected = Number(process.env.OPENTOK_TOKEN_TTL);
      assert.strictEqual(config.opentok.tokenTtl, expected);
    });

    it('Converts values to correct type', function() {
      config.initialize(fakeCb);

      assert.ok(config.sessions);
      assert.ok(config.api);
      var expected = [
        Number(process.env.SESSIONS_MAX_WAIT_TIME),
        process.env.API_BASE_URL
      ];
      assert.strictEqual(config.sessions.maxWaitTime, expected[0]);
      assert.strictEqual(config.api.baseUrl, expected[1]);
    });

    it('Sets database.ssl to false by default', function() {
      config.initialize(fakeCb);

      assert.ok(config.database);
      assert.strictEqual(config.database.ssl, false);
    });

    it('Sets database.ssl to DATABASE_SSL if defined', function() {
      process.env.DATABASE_SSL = 'true';
      config.initialize(fakeCb);

      assert.ok(config.database);
      assert.strictEqual(config.database.ssl, true);
    });

    it('Sets database.ssl to true based on NODE_ENV', function() {
      sandbox.stub(process.env, 'NODE_ENV', 'staging');
      config.initialize(fakeCb);

      assert.ok(config.database);
      assert.strictEqual(config.database.ssl, true);
    });
  });

  describe('set', function() {
    it('Adds to the conifg', function() {
      config.initialize(fakeCb);

      var newConf = {
        foo: 'abc',
        bar: 123
      };

      config.set(newConf);

      assert.strictEqual(config.foo, newConf.foo);
      assert.strictEqual(config.bar, newConf.bar);
    });
  });

  describe('get', function() {
    it('Returns the config, less any functions', function() {
      config.initialize(fakeCb);

      var conf = config.get();
      _.each(conf, function(value) {
        assert.strictEqual(_.isFunction(value), false);
      });
    });
  });
});
